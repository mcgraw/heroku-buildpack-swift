#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

BIN_DIR=$(cd $(dirname $0); pwd)
ROOT_DIR=$(dirname $BIN_DIR)

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

DEFAULT_SWIFT_VERSION="3.0"
CLANG_VERSION=3.7.0
SWIFT_BUILD_CONFIGURATION="release"
SWIFT_BUILD_FLAGS=""

if [ -f "$ENV_DIR/SWIFT_BUILD_CONFIGURATION" ]; then
  SWIFT_BUILD_CONFIGURATION=`cat "$ENV_DIR/SWIFT_BUILD_CONFIGURATION"`
fi
if [ -f "$ENV_DIR/SWIFT_BUILD_FLAGS" ]; then
  SWIFT_BUILD_FLAGS=`cat "$ENV_DIR/SWIFT_BUILD_FLAGS"`
fi

mkdir -p "$CACHE_DIR"

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

apt-get $APT_OPTIONS update | indent
apt-get $APT_OPTIONS -y --force-yes -d install --reinstall uuid-dev 

source "$BIN_DIR/utils"
source "$BIN_DIR/steps/swiftenv"
source "$BIN_DIR/steps/swift"
source "$BIN_DIR/steps/clang"
source "$BIN_DIR/steps/hooks/pre_compile"
source "$BIN_DIR/steps/swift-build"
source "$BIN_DIR/steps/swift-install"

# Setup application environment
mkdir -p $BUILD_DIR/.profile.d

set-env PATH '$HOME/.swift-bin:$PATH'
set-env LD_LIBRARY_PATH '$HOME/.swift-lib'

source "$BIN_DIR/steps/hooks/post_compile"
